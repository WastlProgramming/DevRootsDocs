# Schleifen  & Methoden

Schleifen werden verwendet, um eine Aktion mehrmals auszuf√ºhren. Bis ein Bestimmtes Kriterium erf√ºllt ist.

## Schleifen

### While

Die `while` Schleife wird verwendet, um eine Aktion so lange auszuf√ºhren, wie eine Bedingung wahr ist.

```javascript

let i = 0;

while (i < 5) {
    console.log(i);
    i++;
}

```

### Do-While

Die `do-while` Schleife wird verwendet, um eine Aktion mindestens einmal auszuf√ºhren, bevor die Bedingung √ºberpr√ºft wird.

```javascript

let i = 0;

do {
    console.log(i);
    i++;
} while (i < 5);

```

### For

Die `for` Schleife wird verwendet, um eine Aktion eine bestimmte Anzahl von malen auszuf√ºhren.

```javascript

for (let i = 0; i < 5; i++) {
    console.log(i);
}

```

### Foreach

Die `foreach` Schleife wird verwendet, um √ºber ein Array zu iterieren.

```javascript

let arr = [1, 2, 3, 4, 5];

arr.forEach((item) => {
    console.log(item);
});

```

### Filter

Die `filter` Methode wird verwendet, um ein Array zu filtern.

```javascript

let arr = [1, 2, 3, 4, 5];

let filtered = arr.filter((item) => {
    return item > 2;
});

console.log(filtered);

```

> üí° **Hinweis** Filter filtert nicht das akutelle sonder macht daraus ein neues dann.

### Find

Die `find` Methode wird verwendet, um das erste Element in einem Array zu finden, das eine Bedingung erf√ºllt.

```javascript

let arr = [1, 2, 3, 4, 5];

let found = arr.find((item) => {
    return item > 2;
});

console.log(found);

```

### Map

Die `map` Methode wird verwendet, um ein Array zu transformieren.

```javascript

let arr = [1, 2, 3, 4, 5];

let mapped = arr.map((item) => {
    return item * 2;
});

console.log(mapped); // [2, 4, 6, 8, 10]
```

### Reduce

Die `reduce` Methode wird verwendet, um ein Array auf einen einzigen Wert zu reduzieren.

```javascript

let arr = [1, 2, 3, 4, 5];

let reduced = arr.reduce((acc, item) => {
    return acc + item;
}, 0); // 0 ist der Startwert

console.log(reduced); // 15

```

Hier wird der Startwert `0` √ºbergeben und dann wird jedes Element des Arrays aufaddiert.

### Some

Die `some` Methode wird verwendet, um zu √ºberpr√ºfen, ob mindestens ein Element in einem Array eine Bedingung erf√ºllt.

```javascript

let arr = [1, 2, 3, 4, 5];

let some = arr.some((item) => {
    return item > 2;
});

console.log(some); // true

```

### Every

Die `every` Methode wird verwendet, um zu √ºberpr√ºfen, ob alle Elemente in einem Array eine Bedingung erf√ºllen.

```javascript

let arr = [1, 2, 3, 4, 5];

let every = arr.every((item) => {
    return item > 2;
});

console.log(every); // false

```

## Funktionen

Funktionen werden verwendet, um eine Aktion auszuf√ºhren oder einen Wert zur√ºckzugeben.

> üí° **Hinweis** Funktionen sind wiederverwendbar
> - Eine Funktion kann Parameter entgegennehmen
> - Eine Funktion kann einen Wert zur√ºckgeben
> - Das ergebnis kann zur√ºckgegeben werden mit `return`


> üí° **Hinweis** 
> - globale Variablen : die auf oberster Ebene, also ausserhalb von Funktionen, Schleifen und Bedingungen angelegte Variablen sind global ‚áí sparsam verwenden
> - Alle in Funktionen angelegte Variablen sind lokal und k√∂nnen nur innerhalb der Funktion verwendet werden

### Normale Funktionen

```javascript
function add(a, b) {
    return a + b;
}

console.log(add(2, 3)); // 5
```

### Lokale Funktionen

```javascript
let sayHello = function() {
    let name = 'Max';
    console.log('Hello ' + name);
}

sayHello(); // Hello Max
```

Der Nachteil bei Lokalen Funktionen ist, dass sie nicht wiederverwendbar sind. Das bedeutet, dass sie nur innerhalb der Funktion verwendet werden k√∂nnen.
