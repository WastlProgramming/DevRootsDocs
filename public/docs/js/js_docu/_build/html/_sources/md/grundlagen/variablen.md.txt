# Variablen

In diesem Bereich geht es um Variablen. Variablen sind Platzhalter f√ºr Werte. Sie k√∂nnen Werte speichern und ver√§ndern. In JavaScript gibt es verschiedene Arten von Variablen. In diesem Abschnitt werden wir uns mit den Grundlagen von Variablen in JavaScript befassen.

Variablen sind hier dynamisch typisiert ‚áí Der Typ wird durch die Verwendung bestimmt.

## Variablen deklarieren

Variablen werden in JavaScript mit dem Schl√ºsselwort `var`, `let` oder `const` deklariert. Der Unterschied zwischen `var`, `let` und `const` besteht darin, wie sie im Code verwendet werden k√∂nnen.

### var

`var` ist die alte Art, Variablen in JavaScript zu deklarieren. Variablen, die mit `var` deklariert werden, sind funktions√ºbergreifend sichtbar. Das bedeutet, dass sie innerhalb der Funktion, in der sie deklariert wurden, und in allen Funktionen, die innerhalb dieser Funktion definiert sind, sichtbar sind.

```javascript
var x = 10;
console.log(x); // 10
```

### let

`let` ist die moderne Art, Variablen in JavaScript zu deklarieren. Variablen, die mit `let` deklariert werden, sind block√ºbergreifend sichtbar. Das bedeutet, dass sie innerhalb des Blocks, in dem sie deklariert wurden, und in allen Bl√∂cken, die innerhalb dieses Blocks definiert sind, sichtbar sind.

```javascript
let x = 10;
console.log(x); // 10
```

### const

`const` ist die moderne Art, Konstanten in JavaScript zu deklarieren. Konstanten, die mit `const` deklariert werden, k√∂nnen nicht neu zugewiesen werden. Sie m√ºssen bei der Deklaration initialisiert werden.

```javascript
const x = 10;
console.log(x); // 10
```

## Variablen initialisieren

Variablen k√∂nnen bei der Deklaration initialisiert werden. Das bedeutet, dass ihnen ein Wert zugewiesen wird, wenn sie deklariert werden.

```javascript
var x = 10; // Initialisierung von x mit dem Wert 10
let y = 'Ich bin ein String'; // String
const z = false; // Boolean
let x ; // Undefined
```

## Variablen zuweisen

Variablen k√∂nnen Werte zugewiesen werden. Der Wert einer Variablen kann ge√§ndert werden.

```javascript
var x = 10;
x = 20;
console.log(x); // 20
```

## Variablen verwenden

Variablen k√∂nnen in Ausdr√ºcken und Anweisungen verwendet werden.

```javascript
var x = 10;
var y = 20;
var z = x + y;
console.log(z); // 30

// oder 

let name = 'Max';

console.log('Hallo, ' + name + '!'); // Hallo, Max!

// oder

let name = 'Max';

console.log(`Hallo, ${name}!`); // Hallo, Max!
```

Hier sind einige Beispiele f√ºr die Verwendung.

1. Man kann ganz normal verwenden mit den aufruf
2. Man diese mit `+` verkn√ºpfen (String)
3. Man kann mit "\`" und `${}` verkn√ºpfen (String)

## Variablennamen

Variablennamen k√∂nnen Buchstaben, Zahlen, Unterstriche und Dollarzeichen enthalten. Sie d√ºrfen nicht mit einer Zahl beginnen. Variablennamen sind case-sensitive.

```javascript
var x = 10;
var _y = 20;
var $z = 30;
var x_y = 40;
var X = 50;
console.log(x, _y, $z, x_y, X); // 10 20 30 40 50
```

## Methoden f√ºr Variablen

Variablen k√∂nnen auch Methoden aufrufen. Eine Methode ist eine Funktion, die zu einem Objekt geh√∂rt.

| Methode                  | Beschreibung                                                         | Beispiel                                                                 |
|--------------------------|----------------------------------------------------------------------|--------------------------------------------------------------------------|
| `charAt()`               | Gibt das Zeichen an einer bestimmten Position in einer Zeichenkette zur√ºck | `let text = "Hallo, Welt!";`<br>`let char = text.charAt(1);`<br>`// char = "a";` |
| `text.includes()`        | √úberpr√ºft, ob eine Zeichenkette eine andere Zeichenkette enth√§lt      | `let text = "Hallo, Welt!";`<br>`let isInclude = text.includes("Welt");`<br>`// isInclude = true;` |
| `indexOf()`              | Gibt die Position des ersten Vorkommens eines angegebenen Wertes in einer Zeichenkette zur√ºck | `let text = "Hallo, Welt!";`<br>`let pos = text.indexOf("Welt");`<br>`// pos = 7;` |
| `lastIndexOf()`          | Gibt die Position des letzten Vorkommens eines angegebenen Wertes in einer Zeichenkette zur√ºck | `let text = "Hallo, Welt!";`<br>`let pos = text.lastIndexOf("l");`<br>`// pos = 9;` |
| `replace()`              | Ersetzt einen Teil einer Zeichenkette durch eine andere Zeichenkette | `let text = "Hallo, Welt!";`<br>`let textReplace = text.replace("Welt", "Mars");`<br>`// textReplace = "Hallo, Mars!";` |
| `split(<zeichen>)`       | Teilt eine Zeichenkette in ein Array von Zeichenketten auf            | `let text = "a,b,c,d,e";`<br>`let textArray = text.split(",");`<br>`// textArray = ["a", "b", "c", "d", "e"];` |
| `toUpperCase()`          | Wandelt eine Zeichenkette in Gro√übuchstaben um                        | `let text = "Hallo, Welt!";`<br>`let textUpper = text.toUpperCase();`<br>`// textUpper = "HALLO, WELT!";` |
| `toLowerCase()`          | Wandelt eine Zeichenkette in Kleinbuchstaben um                       | `let text = "Hallo, Welt!";`<br>`let textLower = text.toLowerCase();`<br>`// textLower = "hallo, welt!";` |
| `substring(start, end)`  | Gibt die Zeichenkette zwischen zwei Indizes zur√ºck                    | `let text = "Hallo, Welt!";`<br>`let textSub = text.substring(7, 12);`<br>`// textSub = "Welt!";` |
| `trim()`                 | Entfernt Leerzeichen von beiden Enden einer Zeichenkette              | `let text = " Hallo, Welt! ";`<br>`let textTrim = text.trim();`<br>`// textTrim = "Hallo, Welt!";` |

## Variablen Parsen

Variablen k√∂nnen in verschiedene Datentypen geparst werden.

| Methode                  | Beschreibung                                                         | Beispiel                                                                 |
|--------------------------|----------------------------------------------------------------------|--------------------------------------------------------------------------|
| `parseInt()`             | Parst eine Zeichenkette in eine Ganzzahl                             | `let text = "10";`<br>`let number = parseInt(text);`<br>`// number = 10;` |
| `parseFloat()`           | Parst eine Zeichenkette in eine Gleitkommazahl                       | `let text = "10.5";`<br>`let number = parseFloat(text);`<br>`// number = 10.5;` |
| `String()`               | Parst eine Zahl in eine Zeichenkette                                 | `let number = 10;`<br>`let text = String(number);`<br>`// text = "10";` |
| `Boolean()`              | Parst eine Zahl in einen Boolean                                     | `let number = 10;`<br>`let bool = Boolean(number);`<br>`// bool = true;` |

## Variablen Scope

Der G√ºltigkeitsbereich einer Variablen ist der Bereich, in dem die Variable sichtbar ist. In JavaScript gibt es zwei Arten von G√ºltigkeitsbereichen: global und lokal.

### Globaler Scope

Variablen, die au√üerhalb einer Funktion deklariert werden, haben einen globalen G√ºltigkeitsbereich. Sie sind √ºberall im Code sichtbar.

```javascript
var x = 10; // Globaler Scope
function test() {
  console.log(x); // 10
}
test();
```

### Lokaler Scope

Variablen, die innerhalb einer Funktion deklariert werden, haben einen lokalen G√ºltigkeitsbereich. Sie sind nur innerhalb der Funktion sichtbar.

```javascript
function test() {
  var x = 10; // Lokaler Scope
  console.log(x); // 10
}
test();
console.log(x); // ReferenceError: x is not defined
```

## Abfragen des Typs einer Variablen

Der Typ einer Variablen kann mit dem `typeof`-Operator abgefragt werden.

```javascript
var x = 10;
console.log(typeof x); // number
// oder 

if (typeof x === 'number') {
  console.log('x ist eine Zahl');
}
```

## Instanzof Operator

Der `instanceof`-Operator wird verwendet, um zu √ºberpr√ºfen, ob ein Objekt eine Instanz eines bestimmten Typs ist.

```javascript
var x = new String('Hallo, Welt!');
console.log(x instanceof String); // true
```

## Null und Undefined

`null` und `undefined` sind spezielle Werte in JavaScript.

`null` ist ein Wert, der auf ein Nichtvorhandensein von Wert hinweist.

`undefined` ist ein Wert, der auf eine Variable hinweist, die deklariert, aber nicht initialisiert wurde.

```javascript
var x = null;
var y;
console.log(x); // null

console.log(y); // undefined
```

## isNaN

`isNaN` ist eine Funktion, die pr√ºft, ob ein Wert eine Zahl ist.

```javascript
var x = '10';
console.log(isNaN(x)); // false
```

## Arrays

Ein Array ist ein spezieller Datentyp, der es erm√∂glicht, mehrere Werte in einer einzigen Variablen zu speichern.

> üí°**Hinweis**: Besonderheit bei Array: Hier kann mit `Array.isArray(√ºbergabe)` gepr√ºft werden. Dieser gibt true / false zur√ºck

## Verwendung von Arrays

Arrays k√∂nnen Werte speichern und abrufen.

```javascript
var fruits = ['Apfel', 'Banane', 'Orange'];
console.log(fruits[0]); // Apfel
```

## Array Methoden

| Methode       | Beschreibung                                                                            | Beispiel                                                                                                     |
|---------------|------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|
| `concat()`    | Verbindet zwei oder mehr Arrays                                                           | `let cars3 = cars.concat(cars2);`<br>`// cars3 ist jetzt eine Kombination aus cars und cars2`                |
| `every()`     | √úberpr√ºft, ob alle Elemente in einem Array eine Bedingung erf√ºllen                        | `let allLargeNumbers = array.every(element ‚áí element > 4);`<br>`// allLargeNumbers ist false, wenn nicht alle Elemente gr√∂√üer als 4 sind` |
| `filter()`    | Erstellt ein neues Array, das aus den Elementen eines Arrays besteht, die eine Bedingung erf√ºllen | `let numbers = [1, 2, 3, 4, 5];`<br>`let numbers2 = numbers.filter(x ‚áí x > 3);`<br>`// numbers2 ist jetzt [4, 5]` |
| `find()`      | Gibt das erste Element in einem Array zur√ºck, das eine Bedingung erf√ºllt                  | `let found = array.find(element ‚áí element > 3);`<br>`// found ist jetzt 4`                                  |
| `forEach()`   | F√ºhrt eine Funktion f√ºr jedes Element in einem Array aus                                  | `array.forEach(element ‚áí console.log(element));`<br>`// Gibt jedes Element im Array aus`                    |
| `includes()`  | √úberpr√ºft, ob ein Array ein bestimmtes Element enth√§lt und gibt true oder false zur√ºck    | `let x = cars.includes('Audi');`<br>`// x ist true, wenn 'Audi' in cars enthalten ist`                      |
| `indexOf()`   | Sucht nach dem ersten Vorkommen eines Elements in einem Array und gibt die Position zur√ºck | `let pos = cars.indexOf('Audi');`<br>`// pos ist der Index von 'Audi' in cars`                              |
| `join()`      | Verbindet alle Elemente eines Arrays in eine Zeichenkette                                 | `let carsString = cars.join(' - ');`<br>`// carsString ist jetzt eine Zeichenkette mit allen Elementen von cars, getrennt durch ' - '` |
| `lastIndexOf()` | Sucht nach dem letzten Vorkommen eines Elements in einem Array und gibt die Position zur√ºck | `let pos = cars.lastIndexOf('Audi');`<br>`// pos ist der Index des letzten Vorkommens von 'Audi' in cars`    |
| `map()`       | Erstellt ein neues Array, das aus den Ergebnissen einer Funktion f√ºr jedes Element eines Arrays besteht | `let numbers = [1, 2, 3, 4, 5];`<br>`let numbers2 = numbers.map(x ‚áí x * 2);`<br>`// numbers2 ist jetzt [2, 4, 6, 8, 10]` |
| `pop()`       | Entfernt das letzte Element eines Arrays                                                  | `cars.pop();`<br>`// Entfernt das letzte Element aus cars`                                                   |
| `push()`      | F√ºgt ein neues Element am Ende eines Arrays hinzu                                         | `cars.push('Opel');`<br>`// F√ºgt 'Opel' am Ende von cars hinzu`                                             |
| `reduce()`    | Verwendet eine Funktion, um ein einzelnes Wert aus den Elementen eines Arrays zu erstellen | `let reduced = array.reduce((accumulator, currentValue) ‚áí accumulator + currentValue);`<br>`// reduced ist jetzt die Summe aller Elemente in array` |
| `reverse()`   | Kehrt die Reihenfolge der Elemente eines Arrays um                                        | `cars.reverse();`<br>`// Die Reihenfolge der Elemente in cars ist jetzt umgekehrt`                          |
| `shift()`     | Entfernt das erste Element eines Arrays                                                   | `cars.shift();`<br>`// Entfernt das erste Element aus cars`                                                  |
| `slice()`     | Gibt eine Kopie eines Teils eines Arrays zur√ºck                                           | `let cars2 = cars.slice(1, 3);`<br>`// cars2 ist jetzt ein Array mit den Elementen an den Positionen 1 und 2 von cars` |
| `some()`      | √úberpr√ºft, ob mindestens ein Element in einem Array eine Bedingung erf√ºllt                | `let hasLargeNumber = array.some(element ‚áí element > 4);`<br>`// hasLargeNumber ist true, wenn mindestens ein Element gr√∂√üer als 4 ist` |
| `sort()`      | Sortiert die Elemente eines Arrays                                                        | `cars.sort();`<br>`// Die Elemente in cars sind jetzt sortiert`                                              |
| `splice()`    | F√ºgt oder entfernt Elemente an einer bestimmten Position im Array                         | `cars.splice(2, 0, 'Opel', 'Ford');`<br>`// F√ºgt 'Opel' und 'Ford' an Position 2 in cars ein`               |
| `unshift()`   | F√ºgt ein neues Element am Anfang eines Arrays hinzu                                       | `cars.unshift('Opel');`<br>`// F√ºgt 'Opel' am Anfang von cars hinzu`                                        |

## Mehrdimensionale Arrays

Ein mehrdimensionales Array ist ein Array, das ein anderes Array enth√§lt.

```javascript
var cars = [
  ['Audi', 'BMW', 'Mercedes'],
  ['VW', 'Opel', 'Ford']
];
console.log(cars[0][0]); // Audi
```

## Consolen Ausgaben

In der Konsole k√∂nnen verschiedene Ausgaben gemacht werden.

```javascript
console.log('Hallo, Welt!'); // Hallo, Welt!
console.error('Fehler!'); // Fehler!
console.warn('Warnung!'); // Warnung!
console.info('Information!'); // Information!
```
